package com.ict.day23;

public class Ex01_Stream {
	/*
	 	Stream : 다양한 데이터 소스를 표준화된 방법으로 다루기 위한 것
	 	컬렉션(배열포함)의 저장요소를 하나씩 참조 (90%)
	 	컬렉션(배열포함)의 데이터 소스를 표준화된 방법 (90%)
	 	데이터 소스로 부터 데이터를 읽기만 할뿐 변경하지 않는다.
	 	스트림의 작업은 병렬로 처리
	 	
	 	처리순서: 스트림 생성 => 중간연산 => 최종연산
	 	1.스트림 생성 : 컬랙션, 배열을 Stream 으로 변환 시킴
	 	2.중간연산 : 여어번 반복 사용 가능, 결과가 Stream
	 				중간연산과 최종연산으로 이루어져 있음.
	 				distinct() : 중복제거
	 				filter(조건식) : 조건에 맞는 요소만 추출
	 				limit(개수) : 개수만큼 자르기
	 				skip(개수)  : 개수만큼 건너뛰기
	 				peek()     : 작업 사이에 넣어서 중간 결과를 받을 때 주로 사용 (요소 전체를 반복)
	 				sorted()   : 정렬
	 				map()		: 요소 반환(for문 대신 많이 사용)
	 				flatMap()	: 요소 반환(중첩된 구조를 단일한 구조 병합) 
	 				
		3.최종연산 : 한번만 실행, 스트림 요소가 소모하므로 한번만 적용 가능,
				   (스트림이 닫아져서, 다시 호출 못함,)
				   필요하면 다시 스트림을 생성해서 사용 할 수는 있다.
				   결과가 스트림 아닌 연산
				   forEach() : 요소 전체를 반복
				   count()  : 개수
				   max()	: 최대값
				   min()	: 최소값
				   
				   **보통 filter와 같이 사용된다.
				   findAny() : 아무거나 하나 반환
				   findfirst() : 첫번째 요소 반환
				   
				   allMatch(조건식) : 모두 만족하면 true
				   anyMatch(조건식) : 하나라도 만족하면 true
				   nonMatch(조건식) : 모두 만족하지 않으면 true
				   
				   toArray() : 스트림의 모든 요소를 배열로 반환
				   **reduce : 스트림의 요소들을 누적(sum)하거나 집계(count)하여 하나의 결과를 축약하는데 사용
				   			(합계,곱셈,최소값,최대값 찾기와 같은 누적 작업 많이 사용)
				   	collect : 스트림 요소를 수집
				  			  
		
	 */
	
			
	
	
}
